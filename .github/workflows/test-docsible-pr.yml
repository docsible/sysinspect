name: Test Docsible PR and Generate Documentation

on:
  workflow_dispatch:
    inputs:
      docsible_pr_number:
        description: "Optional: Pull request number on docsible/docsible"
        required: false
        type: number
      use_latest:
        description: "Use latest main branch from docsible/docsible instead of a PR?"
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  test_docsible:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}

      - name: Show current branch
        run: echo "üü¢ Running on branch - ${{ github.ref_name }}"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Get Docsible version and Git commit
        id: docsible_info
        run: |
          VERSION=$(docsible --version | sed -E 's/.*version ([0-9.]+)/\1/')
          DOCSIBLE_PATH=$(python -c "import docsible, os; print(os.path.dirname(docsible.__file__))")

          COMMIT_HASH="unknown"
          COMMIT_MESSAGE="unknown"

          if [ -d "$DOCSIBLE_PATH/.git" ] || (cd "$DOCSIBLE_PATH" && git rev-parse --is-inside-work-tree > /dev/null 2>&1); then
            pushd "$DOCSIBLE_PATH" > /dev/null
            COMMIT_HASH=$(git rev-parse --short HEAD)
            COMMIT_MESSAGE=$(git log -1 --pretty=%s)
            popd > /dev/null
          fi

          echo "‚úÖ Docsible version: $VERSION"
          echo "‚úÖ Commit: $COMMIT_HASH - $COMMIT_MESSAGE"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT

      - name: Install Docsible (PR or latest)
        run: |
          if [[ "${{ github.event.inputs.use_latest }}" == "true" ]]; then
            echo "üì¶ Installing latest Docsible from main branch"
            pip install git+https://github.com/docsible/docsible.git@main
          elif [[ -n "${{ github.event.inputs.docsible_pr_number }}" ]]; then
            echo "üì¶ Installing Docsible from PR #${{ github.event.inputs.docsible_pr_number }}"
            pip install git+https://github.com/docsible/docsible.git@refs/pull/${{ github.event.inputs.docsible_pr_number }}/head
          else
            echo "‚ùå Please provide either a PR number or enable 'use_latest'."
            exit 1
          fi

      - name: Generate documentation for role
        run: |
          docsible -r ./ -g -o README.md -com -nob

      - name: Check for documentation changes
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md

          if git diff --cached --exit-code; then
            echo "‚úÖ No documentation changes to commit"
          elif [ -n "${TOKEN}" ]; then
            COMMIT_MSG="üìò Doc update using docsible v${{ steps.docsible_info.outputs.version }}"
            COMMIT_MSG+=" (commit: ${{ steps.docsible_info.outputs.commit }})"
            COMMIT_MSG+=" - ${{ steps.docsible_info.outputs.message }}"
            git commit -m "${COMMIT_MSG}"
            BRANCH_NAME="main"
            echo "üîÅ Pushing changes back to branch: ${BRANCH_NAME}"
            git push "https://${TOKEN}@github.com/docsible/sysinspect.git" HEAD:${BRANCH_NAME}
          else
            echo "‚ö†Ô∏è Skipping push: TOKEN is not set"
          fi

